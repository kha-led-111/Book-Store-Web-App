// <auto-generated />
using System;
using Bookstore_Ecommerce.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bookstore_Ecommerce.Migrations
{
    [DbContext(typeof(BookEcContext))]
    [Migration("20250820124717_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bookstore_Ecommerce.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profile_picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("author");
                });

            modelBuilder.Entity("Bookstore_Ecommerce.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Book_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PublishId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Publish_data")
                        .HasColumnType("date");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublishId");

                    b.ToTable("books");
                });

            modelBuilder.Entity("Bookstore_Ecommerce.Models.Book_Shop", b =>
                {
                    b.Property<int>("Shopid")
                        .HasColumnType("int");

                    b.Property<int>("Bookid")
                        .HasColumnType("int");

                    b.HasKey("Shopid", "Bookid");

                    b.HasIndex("Bookid");

                    b.ToTable("book_shop");
                });

            modelBuilder.Entity("Bookstore_Ecommerce.Models.Publishing_House", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("publish_house");
                });

            modelBuilder.Entity("Bookstore_Ecommerce.Models.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shoplogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("shops");
                });

            modelBuilder.Entity("Bookstore_Ecommerce.Models.Book", b =>
                {
                    b.HasOne("Bookstore_Ecommerce.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookstore_Ecommerce.Models.Publishing_House", "Publish_house")
                        .WithMany("books")
                        .HasForeignKey("PublishId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Author");

                    b.Navigation("Publish_house");
                });

            modelBuilder.Entity("Bookstore_Ecommerce.Models.Book_Shop", b =>
                {
                    b.HasOne("Bookstore_Ecommerce.Models.Book", "book")
                        .WithMany("Book_shop")
                        .HasForeignKey("Bookid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookstore_Ecommerce.Models.Shop", "shop")
                        .WithMany("Book_shop")
                        .HasForeignKey("Shopid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("shop");
                });

            modelBuilder.Entity("Bookstore_Ecommerce.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Bookstore_Ecommerce.Models.Book", b =>
                {
                    b.Navigation("Book_shop");
                });

            modelBuilder.Entity("Bookstore_Ecommerce.Models.Publishing_House", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("Bookstore_Ecommerce.Models.Shop", b =>
                {
                    b.Navigation("Book_shop");
                });
#pragma warning restore 612, 618
        }
    }
}
